---
title: "SING Bioinformatics Workshop - Part 2"
format: 
  html:
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-expand: true
    embed-resources: true
    theme: litera
    code-overflow: scroll
    css: style.css
---





### HAplotype tree prep (10)


Let’s create our own phylogenetic tree for some population in the database. Choose a population code from the table below and run the following code in `Terminal`:

`grep "PEL" test_dir/1KGP-phase3-samples.txt | awk '{print $1}' > ./samples-of-interest.txt`

NB: change `PEL` to any of the codes listed in the table below to select a particular population

`bcftools view --samples-file test_dir/samples-of-interest.txt --output ./pop.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz workshop_data/data/1KGP/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz`

|     |                                                               |
|:---:|---------------------------------------------------------------|
| ACB | African Caribbean in Barbados                                 |
| ASW | African Ancestry in Southwest USA                             |
| CDX | Chinese Dai in Xishuangbanna, China                           |
| CEU | Utah residents with ancestry from northern and western Europe |
| CHB | Han Chinese in Beijing, China                                 |
| CHS | Han Chinese South, China                                      |
| CLM | Colombian in Medellin, Colombia                               |
| FIN | Finnish in Finland                                            |
| GBR | British From England and Scotland, UK                         |
| GIH | Gujarati Indians in Houston, Texas, USA                       |
| IBS | Iberian populations in Spain                                  |
| JPT | Japanese in Tokyo, Japan                                      |
| KHV | Kinh in Ho Chi Minh City, Vietnam                             |
| LWK | Luhya in Webuye, Kenya                                        |
| MXL | Mexican Ancestry in Los Angeles, California, USA              |
| PEL | Peruvian in Lima, Peru                                        |
| PUR | Puerto Rican in Puerto Rico                                   |
| TSI | Toscani in Italia                                             |
| YRI | Yoruba in Ibadan, Nigeria                                     |

: ^Table\ from\ Diroma\ et\ al.,\ 2014\ BMC\ Genomics\ (<https://doi.org/10.1186%2F1471-2164-15-S3-S2>)^


## Population stratification by PCA’s (15mins)

We might want to visualize what variation looks like in different populations across the entire genome. We can do this with a technique called a Principal Components Analysis (PCA). This type of analysis allows us to assess the relationships between groups on a geometric scale. Generally speaking, groups that are more similar will be closer together on a PCA plot, while groups that are more different will be further apart.

Principal component analysis is a statistical dimension reduction technique that transforms potentially
correlated variables into a linear and non-correlated set of variables. In a genetic context PCA is
used to reduce variation at many thousands of markers into a handful of components that represent
the majority of the variation of the data. The components are ordered such
that the first principal component (PC) captures the most variation, with each subsequent component
capturing less. These components often, but not necessarily, represent population differences and
population substructure.

To calculate the principal components of the genetic data, all populations and chromosomes from the 1000 Genomes Project (Phase3 release) were combined into a single VCF file with BCFtools ([https://samtools.github.io/bcftools/](https://samtools.github.io/bcftools/)), and then the independent markers were identified via Plink v1.9 ([https://www.cog-genomics.org/plink/](https://www.cog-genomics.org/plink/)), using
a sliding window to remove markers that had an inter-marker LD R2 > 0.2, with windows of 50 kb
and a slide of 5 markers. The first 10 principle components were calculated using smartPCA v13050
from Eigensoft v6.0.1 ([https://github.com/chrchang/eigensoft/](https://github.com/chrchang/eigensoft/)). The following code was used to accomplish these steps.


:::{.callout-note title="Generating PCA Data" collapse="true"}
```{bash}
#| eval: false

# combine all chromosomes together
bcftools concat \
  --threads ${SLURM_CPUS_PER_TASK} \
  -O z \
  -o 1KGP_allchr.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr1.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr2.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr3.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr4.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr5.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr6.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr7.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr8.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr9.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr10.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr11.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr12.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr13.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr14.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr15.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr16.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr17.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr18.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr19.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr20.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr21.no_indel.biallelic.vcf.gz \
  ${DATA_DIR}/ALL/ALL_chr22.no_indel.biallelic.vcf.gz 

# find independent SNPs  
plink \
  --vcf 1KGP_allchr.vcf.gz \
  --maf 0.1 \
  --indep-pairwise 50 5 0.2 \
  --out 1KGP_allchr

# create an empty affection file that is required for 
# Plink to use the --make-pheno
# which in turn is required for the creation of the 
# ped file just the way SmartPCA wants it
touch cases.txt
plink \
  --vcf 1KGP_allchr.vcf.gz \
  --extract 1KGP_allchr.prune.in \
  --recode \
  --out 1KGP_allchr_indep \
  --make-pheno cases.txt '*'
```

Contents of `_par.PED.EIGENSTRAT_`:
```
genotype: 1KGP_allchr_indep.ped
snpname: 1KGP_allchr_indep.map
indivname: 1KGP_allchr_indep.ped
outputformat: EIGENSTRAT
genotypeoutname: 1KGP_allchr_indep.eigenstratgeno
snpoutname: 1KGP_allchr_indep.snp
indivoutname: 1KGP_allchr_indep.ind
familynames: NO
```

```{bash}
#| eval: false

# calculate the principle components
convertf -p par.PED.EIGENSTRAT > eigen.log
smartpca.perl \
-i 1KGP_allchr_indep.eigenstratgeno \
-a 1KGP_allchr_indep.snp \
-b 1KGP_allchr_indep.ind \
-o 1KGP_allchr_indep_eigen.pca \
-p 1KGP_allchr_indep_eigen \
-e 1KGP_allchr_indep_eigen.eval \
-l 1KGP_allchr_indep_eigen.log \
-m 0

```

:::


For this section ensure you are using the R Console tab

```{r}
#| echo: false
#| out-width: 75%
#| fig-align: center
 
knitr::include_graphics("images/console_tab.png")
```



```{r}
#| messages: false
#| warning: false
library(tidyverse)
```



```{r}
#| warning: false
#| message: false
pca_data <- read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/PCA/1KGP_allchr_indep_eigen.pca.evec.tsv", 
  col_names = c("sample", paste0("PC",1:10),"case_control"), 
  comment = "#", 
  col_select = -"case_control") %>% left_join(read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/integrated_call_samples_v3.20130502.ALL.panel", 
  col_names = TRUE, 
  col_select = c("sample", "pop","super_pop")), 
  by = "sample")

pc_loadings <- read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/PCA/1KGP_allchr_indep_eigen.pca.evec.tsv", 
  col_names = FALSE, 
  n_max = 1)
```

```{r}
theme_set(theme_bw())

ggplot(data = pca_data, aes(x = PC1, y = PC2, colour = super_pop)) + geom_point()
```


### Exercise

Investigate different PCs to see which combinations are best to visualise separation between different populations

```{r}
#| eval: false

# Use this template code
ggplot(data = pca_data, 
       aes(x = PC1, # change the number (1-10)
           y = PC2, # change the number (1-10)
           colour = super_pop)) + geom_point()
```


# **Mitochondrial Haplotypes** (15 min)

Mitochondria contain their own short, circular DNA sequences that are distinct from the rest of the genome. They are present in large copy number, mutate relatively rapidly, and their small size and distinctiveness makes them easy to target and sequence, especially in large, mixed samples such as at the population level.

Mitochondrial DNA is inherited maternally and does not undergo recombination on the way. These characteristics make them particularly suitable for Haplotype analysis. Haplotypes are blocks of SNPs that get inherited together, and which are eventually broken up by recombination, the ‘mixing’ of maternal and paternal DNA that occurs during the formation of eggs and sperm. The stability of mitochondrial haplotypes makes them useful for tracking long term evolutionary patterns, such as population stratification.

As populations become separated and accumulate mutations, haplotypes unique to those populations are formed. Haplotype analysis aims to reconstruct the relationships between haplotypes, and family trees (phylogenies) can be reconstructed that trace their evolution. We will be using 1000 Genomes data to explore human haplotype variation across the globe.

In the lower right-hand side of R Studio, find the file

`workshop_data/data/1KGP/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz`

and select by clicking the checkbox. Then click on the settings gear to open a drop-down menu and select Export to save it to your computer locally.

In a web browser, navigate to <https://haplogrep.i-med.ac.at/> and upload the file using the `Browse...` button. Choose the following options:

File Format: VCF\
Phylogenetic tree: PhyloTree 17.0\
Distance Function: Kulczynski\
Output: (leave blank)

Then select **Upload and Classify**

The program may take a few minutes to run before it opens your results in a new menu. These results will show you the haplotype clusters found in the file, and some quality control metrics.

1.  Click on a haplotype cluster to open a new window, which will describe the prevalence of that cluster in different global populations. Haplogrep will also display a phylogenetic tree that describes the relationships of haplogroups in the cluster.
2.  Navigate to the Samples table at the top of the page. Here, you can click on any variant in the Mutations column to explore metrics specific to that variant, such as its frequency in different populations.
3.  Continue to explore the outputs of Haplogrep for this global sample of individuals.

## **Haplotype tree** (10min)



Now run the following code in the R `Console` to create a dendrogram, a tree that groups samples by their similarity.

```{r}
#| eval: false
library(fastreeR)

```

```{r}
#| eval: false

# TODO: input file to correct path
myVcfDist <- fastreeR::vcf2dist(inputFile = "../data/1KGP/pop.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz", threads = 1)
```

```{r}
#| eval: false
myVcfTreeStats <- stats::hclust(myVcfDist)
```

```{r}
#| eval: false
plot(myVcfTreeStats, ann = FALSE, cex = 0.5)
```

1.  How much variation is present in your population?
2.  How many major groups are present?
3.  Looking at the vertical axis, how much variation is actually present in the group? How different is this to other groups?


# Appendix

## R reference

