---
title: "SING Bioinformatics Workshop - Part 2"
format: 
  html:
    toc: true
    toc-depth: 3
    toc-expand: true
    embed-resources: true
    theme: litera
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| output: false
library(tidyverse)
```

## Population stratification by PCA’s (15mins)

We might want to visualize what variation looks like in different
populations across the entire genome. We can do this with a technique
called a Principal Components Analysis (PCA). Principal component
analysis is a statistical dimension reduction technique that transforms
potentially correlated variables into a linear and non-correlated set of
variables. In a genetic context PCA is used to reduce variation at many
thousands of markers into a handful of components that represent the
majority of the variation of the data (Patterson et al., 2006). The
components are ordered such that the first principal component (PC)
captures the most variation, with each subsequent component capturing
less. These components often, but not necessarily, represent population
differences and population substructure.

To calculate the principal components of the genetic data, all
populations and chromosomes were combined into a single VCF file with
BCFtools v1.3.1, and then the independent markers were identified via
Plink v1.9b4.9, using a sliding window to remove markers that had an
inter-marker LD R2 \> 0.2, with windows of 50 kb and a slide of 5
markers. The first 10 principle components were calculated using
smartPCA v13050 from Eigensoft v6.0.1 (Price et al., 2006). The
following `bash` code was used to accomplish these steps. They're here
for your reference, but you don't need to run them now.

```{bash}
#| eval: false

#combine the chromosomes
bcftools concat \
-O z \
-o -o NZ_1KGP_allchr.vcf.gz \
--threads 10 $(ls NZ_1KGP.chr*gz | sort -n -t'r' -k2)
#find the independent markers
plink1.9b4.9 --vcf NZ_1KGP_allchr.vcf.gz \
--maf 0.1 \
--indep-pairwise 50 5 0.2 \
--out NZ_1KGP_allchr

# create an empty affection file that is required for 
# Plink to use the --make-pheno
# which in turn is required for the creation of the 
# ped file just the way SmartPCA wants it
touch cases.txt
plink1.9b4.9 --vcf NZ_1KGP_allchr.vcf.gz \
--extract NZ_1KGP_allchr.prune.in \
--recode \
--out NZ_1KGP_allchr_indep \
--make-pheno cases.txt '*'
# create the eigenstrat file
echo -e "genotype: 1KGP_allchr_indep.ped\nsnpname: \
1KGP_allchr_indep.map\nindivname: \
1KGP_allchr_indep.ped\noutputformat: \
EIGENSTRAT\ngenotypeoutname: \
1KGP_allchr_indep.eigenstratgeno\nsnpoutname: \
1KGP_allchr_indep.snp\nindivoutname: \
1KGP_allchr_indep.ind\nfamilynames: \
NO" > par.PED.EIGENSTRAT
# calculate the principle components
convertf -p par.PED.EIGENSTRAT > eigen.log
smartpca.perl \
-i 1KGP_allchr_indep.eigenstratgeno \
-a 1KGP_allchr_indep.snp \
-b 1KGP_allchr_indep.ind \
-o 1KGP_allchr_indep_eigen.pca \
-p 1KGP_allchr_indep_eigen \
-e 1KGP_allchr_indep_eigen.eval \
-l 1KGP_allchr_indep_eigen.log \
-m 0

```

We're going to have a look at the PCA plot of the 1000 Genomes data. The following code in `Console` will generate the plot.

```{r}
#| output: false
pca_data <- read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/PCA/1KGP_allchr_indep_eigen.pca.evec.tsv", col_names = c("sample", paste0("PC",1:10),"case_control"), comment = "#", col_select = -"case_control") %>% left_join(
read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/integrated_call_samples_v3.20130502.ALL.panel", col_names = TRUE, col_select = c("sample", "pop","super_pop")), by = "sample")

pc_loadings <- read_delim("/projects/teaching/sing_guam/workshop_data/data/1KGP/PCA/1KGP_allchr_indep_eigen.pca.evec.tsv", col_names = FALSE, n_max = 1)
```


```{r}
theme_set(theme_bw())

ggplot(data = pca_data, aes(x = PC1, y = PC2, colour = super_pop)) + geom_point()
```

The data are color coded into five superpopulations: African, Admixed American, European, East Asian, and South Asian.

### Exercise

Investigate different PCs to see which combinations are best to
visualise separation between different populations.

```{r}
#| eval: false

# Use this template code
ggplot(data = pca_data, 
       aes(x = PC1, # change
           y = PC2, # change
           colour = super_pop)) + geom_point()
```

1. How does changing the PC axes change the shape of the data?
2. Which axes explain most of the differences between populations?

# **Mitochondrial Haplotypes** (15 min)

Mitochondria contain their own short, circular DNA sequences that are
distinct from the rest of the genome. They are present in large copy
number, mutate relatively rapidly, and their small size and
distinctiveness makes them easy to target and sequence, especially in
large, mixed samples such as at the population level.

Mitochondrial DNA is inherited maternally and does not undergo
recombination on the way. These characteristics make them particularly
suitable for Haplotype analysis. Haplotypes are blocks of SNPs that get
inherited together, and which are eventually broken up by recombination,
the ‘mixing’ of maternal and paternal DNA that occurs during the
formation of eggs and sperm. The stability of mitochondrial haplotypes
makes them useful for tracking long term evolutionary patterns, such as
population stratification.

As populations become separated and accumulate mutations, haplotypes
unique to those populations are formed. Haplotype analysis aims to
reconstruct the relationships between haplotypes, and family trees
(phylogenies) can be reconstructed that trace their evolution. We will
be using 1000 Genomes data to explore human haplotype variation across
the globe.

### Haplogroup Exercise

In the lower right-hand side of R Studio, in the Files tab, find the
file

`workshop_data/data/1KGP/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz`

and select by clicking the checkbox. Then click on the settings gear to
open a drop-down menu and select `Export` to save it to your computer
locally.

In the web browser, navigate to <https://haplogrep.i-med.ac.at/> and
upload the file using the `Browse...` button. Choose the following
options:

File Format: VCF\
Phylogenetic tree: PhyloTree 17.0\
Distance Function: Kulczynski\
Output: (leave blank)

Then select **Upload and Classify**

The program may take a few minutes to run before it opens your results
in a new menu. These results will show you the haplotype clusters found
in the file, and some quality control metrics.

1.  Click on a haplotype cluster to open a new window, which will
    describe the prevalence of that cluster in different global
    populations. Haplogrep will also display a phylogenetic tree that
    describes the relationships of haplogroups in the cluster.
2.  Navigate to the Samples table at the top of the page. Here, you can
    click on any variant in the Mutations column to explore metrics
    specific to that variant, such as its frequency in different
    populations.
3.  Continue to explore the outputs of Haplogrep for this global sample
    of individuals.

### Haplotype tree exercise (10min)

We'll now return to the data file we created earlier in the day. Run the following code in the R `Console` to create a dendrogram, a
tree that groups samples by their similarity.

```{r}
#| eval: false
library(fastreeR)

```

```{r}
#| eval: false

# TODO: input file to correct path
myVcfDist <- fastreeR::vcf2dist(inputFile = "../data/1KGP/pop.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz", threads = 1)
```

```{r}
#| eval: false
myVcfTreeStats <- stats::hclust(myVcfDist)
```

```{r}
#| eval: false
plot(myVcfTreeStats, ann = FALSE, cex = 0.5)
```

1.  How much variation is present in your population?
2.  How many major groups are present?
3.  Looking at the vertical axis, how much variation is actually present
    in the group? How different is this to other groups?

# Appendix

## R quick reference
RStudio's GUI is generally easy to navigate:

- In the lower right, the 'files' tab will display the directories and files for the workshop

- In the lower right, the 'Plots' tab will show you the last plot you created

- On the lower left, you can switch between the `Terminal` tab for BASH and `Console` for R code
